{"version":3,"sources":["styles/photos/stockIcon.gif","components/Header.js","actions/action.js","components/LoginForm.js","components/RegistrationPage.js","components/MessageInputBox.js","components/ImageDisplayer.js","components/MessageFeed.js","components/UserProfileSynopsis.js","components/AHMessageFeed.js","components/deleteUserButton.js","components/MainFeedNavButton.js","components/LogOutButton.js","components/Profile.js","components/ProfilePageNavButton.js","components/PostNewMessage.js","components/SearchForMessage.js","components/DeleteMessage.js","components/MainPage.js","components/App.js","registerServiceWorker.js","reducers/reducerIndex.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","React","Component","login","loginData","dispatch","type","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","ok","json","err","data","success","getAllUsersInfo","catch","loginResult","fetchMessages","response","getMessages","messages","getAHMessages","getUserSuccess","user","getAllInfo","users","logoutCurrentUser","LoginForm","state","username","password","handleCheckUserName","event","_this","setState","target","value","handleCheckPassword","handleLogin","props","Grid","Form","action","Segment","onChange","this","required","placeholder","onClick","Link","to","connect","result","LoginResult","push","window","alert","loginThenMainFeed","RegistrationPage","displayName","handleChangeUsername","handleChangePassword","handleChangeDisplayName","handleRegister","register","stacked","Field","Button","name","registerResult","registerData","_fixTheRoute","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","fixTheRoute","MessageInputBox","message","handleMessages","_this2","handlepostMessage","postMessage","text","getState","token","Authorization","ImageDisplayer","src","stockIcon","concat","userID","status","MessageFeed","_React$Component","_getPrototypeOf2","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","matchIdtoUsername","userId","find","id","formatDate","createdAt","date","Date","toLocaleDateString","toLocaleTimeString","inherits","createClass","key","map","components_ImageDisplayer","mapDispatchToProps","UserProfileSynopsis","getUserData","Card","Content","Meta","moment","fromNow","Description","about","extra","Icon","AHID","DeleteUserButton","deleteUser","deleteUserResult","MainFeedNavButton","setRedirect","LogOutButton","logoutUser","Profile","handleChangeUpdatePassword","handleChangeUpdateDisplayName","handleUpdate","updateUser","centered","width","Column","components_UserProfileSynopsis","AHMessageFeed","deleteUserButton","components_MainFeedNavButton","components_LogOutButton","userData","newUserData","updateResult","ProfilePageNavButton","MainPage","components_MessageInputBox","components_MessageFeed","components_ProfilePageNavButton","App","innerWidth","components_Header","Switch","Route","exact","path","render","Fragment","components_LoginForm","components_RegistrationPage","components_Profile","components_MainPage","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","initialState","updatedAt","reducer","undefined","objectSpread","AHMessages","browserHistory","createBrowserHistory","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","es","lib","basename","process","history","components_App","document","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kiBCgCzBC,2LAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,6BALaE,IAAMC,+CCuGdC,EAAQ,SAAAC,GAAS,OAAI,SAAAC,GAMhC,OAJAA,EAAS,CACPC,KArHiB,UAwHZC,MAAM,+CAAgD,CAC3DC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUT,KAEpBU,KAAK,SAAAC,GAOJ,OANKA,EAAIC,IACPD,EAAIE,OAAOH,KAAK,SAAAI,GACd,MAAMA,IAIHH,EAAIE,SAEZH,KAAK,SAAAK,GAEJ,IAAqB,IAAjBA,EAAKC,QASP,KAAM,QARNf,EAAS,CACPC,KA7ImB,gBA8InBF,UAAWe,IAGbd,EAASgB,OAMZC,MAAM,SAAAJ,GAGL,MAAMb,EAAS,CACbC,KAzJqB,gBA0JrBiB,YAAa,4BAmFRC,EAAgB,kBAAM,SAAAnB,GACjCE,MAAM,uDACHO,KAAK,SAAAW,GAAQ,OAAIA,EAASR,SAC1BH,KAAK,SAAAK,GACJd,EAASqB,EAAYP,EAAKQ,eAInBD,EAAc,SAAAC,GACzB,MAAO,CACLrB,KA1OwB,eA2OxBqB,aAcSC,EAAgB,SAAAD,GAC3B,MAAO,CACLrB,KApP6B,oBAqP7BqB,aAgBSE,EAAiB,SAAAC,GAC5B,MAAO,CACLxB,KAzQ4B,mBA0Q5BwB,SAIST,EAAkB,kBAAM,SAAAhB,GACnCE,MAAM,gEACHO,KAAK,SAAAW,GAAQ,OAAIA,EAASR,SAC1BH,KAAK,SAAAK,GACJd,EAAS0B,EAAWZ,EAAKa,YAIlBD,EAAa,SAAAC,GACxB,MAAO,CACL1B,KA1RyB,gBA2RzB0B,UAUSC,EAAmB,WAC9B,MAAO,CACL3B,KAhSuB,oDC1BrB4B,qNACJC,MAAQ,CACNC,SAAU,GACVC,SAAU,MAGZC,oBAAsB,SAAAC,GACpBC,EAAKC,SAAS,CACZL,SAAUG,EAAMG,OAAOC,WAI3BC,oBAAsB,SAAAL,GACpBC,EAAKC,SAAS,CACZJ,SAAUE,EAAMG,OAAOC,WAI3BE,YAAc,SAAAN,GACZC,EAAKM,MAAM3C,MAAM,CACfiC,SAAUI,EAAKL,MAAMC,SACrBC,SAAUG,EAAKL,MAAME,oFAKvB,OACExC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACEC,OAAO,iDACPzC,OAAO,MACPR,UAAU,iBAEVH,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACL6C,SAAUC,KAAKd,oBACfe,UAAQ,EACRC,YAAY,qBAIlBzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEO,KAAK,WACL6C,SAAUC,KAAKR,oBACfS,UAAQ,EACRC,YAAY,qBAIlBzD,EAAAC,EAAAC,cAAA,OACEC,UAAU,oCACVuD,QAASH,KAAKP,aAFhB,UAOFhD,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMC,GAAG,iBACP5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,kCAjEUE,cA4FTwD,oBAXS,SAAAvB,GACtB,MAAO,CACLwB,OAAQxB,EAAMyB,cAIS,SAAAvD,GACzB,MAAO,CACLF,MAAO,SAAAC,GAAS,OAAIC,EDqBS,SAAAD,GAAS,OAAI,SAAAC,GAC5CA,EAASF,EAAMC,IACdU,KAAK,kBAAMT,EAASwD,eAAK,gBACzBvC,MAAM,kBAAMwC,OAAOC,MAAM,uDCxBKC,CAAkB5D,OAGpCsD,CAGbxB,qBC9FI+B,6MACJ9B,MAAQ,CACNC,SAAU,GACVC,SAAU,GACV6B,YAAa,MAEfC,qBAAuB,SAAA5B,GACrBC,EAAKC,SAAS,CACZL,SAAUG,EAAMG,OAAOC,WAG3ByB,qBAAuB,SAAA7B,GACrBC,EAAKC,SAAS,CACZJ,SAAUE,EAAMG,OAAOC,WAG3B0B,wBAA0B,SAAA9B,GACxBC,EAAKC,SAAS,CACZyB,YAAa3B,EAAMG,OAAOC,WAG9B2B,eAAiB,SAAA/B,GACfC,EAAKM,MAAMyB,SAAS,CAClBnC,SAAUI,EAAKL,MAAMC,SACrBC,SAAUG,EAAKL,MAAME,SACrB6B,YAAa1B,EAAKL,MAAM+B,uFAI1B,OACErE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,QACdH,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMhD,UAAU,iBACdH,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAASsB,SAAO,GACd3E,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,KACE5E,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACL6C,SAAUC,KAAKe,qBACfd,UAAQ,EACRC,YAAY,cAGhBzD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,KACE5E,EAAAC,EAAAC,cAAA,SACEO,KAAK,WACL6C,SAAUC,KAAKgB,qBACff,UAAQ,EACRC,YAAY,cAGhBzD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,KACE5E,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACL6C,SAAUC,KAAKiB,wBACfhB,UAAQ,EACRC,YAAY,kBAGhBzD,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CACEnB,QAASH,KAAKkB,eACdK,KAAK,WACLrB,YAAY,YAHd,uBA5DiBpD,aAqFhBwD,oBAVS,SAAAvB,GACtB,MAAO,CACLwB,OAAQxB,EAAMyC,iBAGS,SAAAvE,GACzB,MAAO,CACLkE,SAAU,SAAAM,GAAY,OAAIxE,EFxBN,SAAAwE,GAAY,OAAI,SAAAxE,GAEtCA,EAAS,CACPC,KAlEoB,aAqEtBC,MAAM,kDAAmD,CACvDC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUgE,KAEpB/D,KAAK,SAAAC,GAOJ,OANKA,EAAIC,IACPD,EAAIE,OAAOH,KAAK,SAAAI,GACd,MAAMA,IAIHH,EAAIE,SAEZH,KAAK,SAAAK,GAAQ,SAAA2D,IAAA,OAAAA,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAnF,EAAAoF,KAQZ,SAAAC,IAAA,OAAAF,EAAAnF,EAAAsF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQlF,EACJF,EAAM,CACJiC,SAAUyC,EAAazC,SACvBC,SAAUwC,EAAaxC,YAGxBvB,KAAK,kBAAMT,EAASwD,eAAK,mBAP9B,wBAAAwB,EAAAG,SAAAL,EAAA/B,UARYqC,MAAArC,KAAAsC,WAEZrF,EAAS,CACPC,KAvFwB,mBAwFxBiE,SAAUpD,EACVwC,OAAQ,6BALE,WAAAmB,EAAAW,MAAArC,KAAAsC,WAiBZC,KAGDrE,MAAM,SAAAJ,GAELb,EAAS,CACPC,KA1GqB,gBA2GrBqD,OAAQ,2BEtBuBY,CAASM,OAGjCnB,CAGbO,GCpFI2B,UANoB3F,IAAMC,qNAO9BiC,MAAQ,CACN0D,QAAS,MAEXC,eAAiB,SAAAvD,GACfwD,EAAKtD,SAAS,CAAEoD,QAAStD,EAAMG,OAAOC,WAExCqD,kBAAoB,SAAAzD,GAClBwD,EAAKjD,MAAMmD,YAAYF,EAAK5D,MAAM0D,SAClCE,EAAKtD,SAAS,CAAEoD,QAAS,8EAGzB,OACEhG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE4C,MAAOS,KAAKjB,MAAM0D,QAClBvC,YAAY,cACZhD,KAAK,OACL6C,SAAUC,KAAK0C,iBAEjBjG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQwD,QAASH,KAAK4C,mBAAtB,eACAnG,EAAAC,EAAAC,cAAA,qBAxBkBE,IAAMC,YA0CrBwD,oBAVS,SAAAvB,GACtB,MAAO,CACLR,SAAUQ,EAAMR,WAIO,SAAAtB,GAAQ,MAAK,CACtC4F,YAAa,SAAAJ,GAAO,OAAIxF,GHXC6F,EGWoBL,EHXZ,SAACxF,EAAU8F,GAC5C,IAAMC,EAAQD,IAAW/F,UAAUgG,MAEnC7F,MAAM,8CAA+C,CACnDC,OAAQ,OACRC,QAAS,CACP4F,cAAe,UAAYD,EAC3B1F,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEqF,KAAMA,MAE5BpF,KAAK,SAAAW,GAAQ,OAAIA,EAASR,SAC1BH,KAAK,SAAAK,GACJd,EAASmB,UAbY,IAAA0E,KGcZxC,CAGbkC,gDClCaU,6MAlBZnE,MAAQ,CAAEoE,IAAKC,wFAEb,IAAAT,EAAA3C,KACE7C,MAAK,2CAAAkG,OAA4CrD,KAAKN,MAAM4D,OAAvD,aACA5F,KAAK,SAAAC,GACiB,MAAfA,EAAI4F,QAAkB5F,EAAIC,IAC1B+E,EAAKtD,SAAS,CACV8D,IAAG,2CAAAE,OAA6CV,EAAKjD,MAAM4D,OAAxD,iDAMnB,OACQ7G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQuG,IAAKnD,KAAKjB,MAAMoE,aAfzBtG,IAAMC,WCItB0G,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAtE,EAAAuC,OAAAgC,EAAA,EAAAhC,CAAA3B,KAAAwD,GAAA,QAAAI,EAAAtB,UAAAuB,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAA1B,UAAA0B,GAAA,OAAA5E,EAAAuC,OAAAsC,EAAA,EAAAtC,CAAA3B,MAAA0D,EAAA/B,OAAAuC,EAAA,EAAAvC,CAAA6B,IAAAW,KAAA9B,MAAAqB,EAAA,CAAA1D,MAAAqD,OAAAS,MAKEM,kBAAoB,SAAAC,GAClB,IAAI3F,EAAOU,EAAKM,MAAMd,MAAM0F,KAAK,SAAA5F,GAAI,OAAIA,EAAK6F,KAAOF,IACrD,OAAI3F,EAAaA,EAAKM,SACf,WARXI,EAWEoF,WAAa,SAAAC,GACX,IAAMC,EAAO,IAAIC,KAAKF,GACtB,OAAOC,EAAKE,qBAAuB,OAASF,EAAKG,sBAbrDzF,EAAA,OAAAuC,OAAAmD,EAAA,EAAAnD,CAAA6B,EAAAC,GAAA9B,OAAAoD,EAAA,EAAApD,CAAA6B,EAAA,EAAAwB,IAAA,oBAAAzF,MAAA,WAEIS,KAAKN,MAAMtB,kBAFf,CAAA4G,IAAA,SAAAzF,MAAA,WAgBW,IAAAoD,EAAA3C,KACP,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZoD,KAAKN,MAAMnB,SAAS0G,IAAI,SAAAxC,GAAO,OAC9BhG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuI,EAAD,CAAgB5B,OAAQb,EAAQ4B,SAC/B1B,EAAKyB,kBAAkB3B,EAAQ4B,QAFlC,KAE4C5H,EAAAC,EAAAC,cAAA,WACzC8F,EAAQK,KAHX,IAGiBrG,EAAAC,EAAAC,cAAA,WACdgG,EAAK6B,WAAW/B,EAAQgC,oBAzBvCjB,EAAA,CAAiC3G,IAAMC,WA0CjCqI,EAAqB,CAEzB/G,iBAIakC,oBAbS,SAAAvB,GACtB,MAAO,CACLR,SAAUQ,EAAMR,UAAY,GAC5BK,MAAOG,EAAMH,QAYfuG,EAFa7E,CAGbkD,6BCnDI4B,6MAOJhB,kBAAoB,SAAAC,GAClB,IAAI3F,EAAOU,EAAKM,MAAMhB,KAAK4F,KAAK,SAAA5F,GAAI,OAAIA,EAAK6F,KAAOF,IACpD,OAAI3F,EAAaA,EAAKM,SACf,8FARPgB,KAAKN,MAAM2F,+CAYX,OACE5I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,CAAM1I,UAAU,eAEdH,EAAAC,EAAAC,cAACuI,EAAD,CAAgB5B,OAAQtD,KAAKN,MAAMhB,KAAK6F,KAExC9H,EAAAC,EAAAC,cAAC2I,EAAA,EAAKC,QAAN,KACE9I,EAAAC,EAAAC,cAAC2I,EAAA,EAAK9I,OAAN,cAAoBwD,KAAKN,MAAMhB,KAAKoC,aACpCrE,EAAAC,EAAAC,cAAC2I,EAAA,EAAKE,KAAN,KAEI/I,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,iBACe6I,IAAOzF,KAAKN,MAAMhB,KAAK+F,WAAWiB,YAIrDjJ,EAAAC,EAAAC,cAAC2I,EAAA,EAAKK,YAAN,yBACoB3F,KAAKN,MAAMhB,KAAKM,SADpC,gDAC2FgB,KAAKN,MAAMhB,KAAKkH,MAD3G,OAMFnJ,EAAAC,EAAAC,cAAC2I,EAAA,EAAKC,QAAN,CAAcM,OAAK,GACjBpJ,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,CAAMvE,KAAK,SADb,wBApCsB1E,IAAMC,WA4DzBwD,oBAbS,SAAAvB,GACtB,MAAO,CACLwB,OAAQxB,EAAMyC,eACd9C,KAAMK,EAAML,OAIW,SAAAzB,GACzB,MAAO,CACLoI,YAAa,kBAAMpI,ENuNU,SAACA,EAAU8F,GAC1C,IAAMsB,EAAStB,IAAW/F,UAAUuH,GACpCtH,EAAS,CACPC,KA/PoB,aAiQtBC,MAAK,2CAAAkG,OAA4CgB,IAC9C3G,KAAK,SAAAW,GAAQ,OAAIA,EAASR,SAC1BH,KAAK,SAAAK,GACJd,EAASwB,EAAeV,EAAKW,cM3NpB4B,CAGb8E,GC5DMD,EACJ,CAEE/G,cPwPyB,kBAAM,SAACnB,EAAU8F,GAC9C,IAAMgD,EAAOhD,IAAW/F,UAAUuH,GAClCpH,MAAK,2CAAAkG,OAA4C0C,IAE9CrI,KAAK,SAAAW,GAAQ,OAAIA,EAASR,SAC1BH,KAAK,SAAAK,GACJd,EAASuB,EAAcT,EAAKW,KAAKH,gBO3PtB+B,oBAbO,SAAAvB,GACpB,MAAO,CACLR,SAAUQ,EAAML,KAAKH,UAAY,GACjCK,MAAOG,EAAMH,QAUuBuG,EAAzB7E,CAA6CkD,GCZxDwC,mLAEF,OACEvJ,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAQ1E,UAAU,mBAAmBuD,QAASH,KAAKN,MAAMuG,YAAzD,sBAHyBpJ,IAAMC,WAgBtBwD,qBACb,KAPyB,SAAArD,GACzB,MAAO,CACLgJ,WAAY,kBAAMhJ,ERoMU,SAACA,EAAU8F,GACzC,IAAMC,EAAQD,IAAW/F,UAAUgG,MACnC/F,EAAS,CACPC,KAtMuB,gBAyMzBC,MAAM,0CAA2C,CAC/CC,OAAQ,SACRC,QAAS,CACP4F,cAAe,UAAYD,KAG5BtF,KAAK,SAAAC,GAMJ,OALKA,EAAIC,IACPD,EAAIE,OAAOH,KAAK,SAAAI,GACd,MAAMA,IAGHH,EAAIE,SAEZH,KAAK,SAAAK,GACJd,EAAS,CACPC,KAxN2B,wBA0N7BD,EAASwD,eAAK,QAEfvC,MAAM,SAAAJ,GACLb,EAAS,CACPC,KA7N2B,sBA8N3BgJ,iBAAkB,6BQ7NX5F,CAGb0F,GCLaG,4LAZX,OAGE1J,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMC,GAAG,aACP5D,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAQ1E,UAAU,oBAAoBuD,QAASH,KAAKoG,aAApD,qBANwBvJ,IAAMC,YCChCuJ,4LAEF,OACE5J,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CACE1E,UAAU,eACVuD,QAASH,KAAKN,MAAM4G,YAFtB,kBAHqBzJ,IAAMC,YAc3BqI,GAAqB,CACzBmB,WVqSwB,kBAAM,SAAArJ,GAC9BA,EAAS4B,KACT5B,EAASwD,eAAK,SUpSDH,qBACb,KACA6E,GAFa7E,CAGb+F,ICZIE,sNACJxH,MAAQ,CACNC,SAAU,GACVC,SAAU,GACV6B,YAAa,GACbkC,MAAO,MAITwD,2BAA6B,SAAArH,GAC3BC,EAAKC,SAAS,CACZJ,SAAUE,EAAMG,OAAOC,WAK3BkH,8BAAgC,SAAAtH,GAC9BC,EAAKC,SAAS,CACZyB,YAAa3B,EAAMG,OAAOC,WAG9BmH,aAAe,SAAAvH,GAEbC,EAAKM,MAAMiH,WAAW,CACpB1H,SAAUG,EAAKL,MAAME,SACrB6B,YAAa1B,EAAKL,MAAM+B,uFAM1B,OACErE,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,OAAOgK,UAAQ,GAC7BnK,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMhD,UAAU,QACdH,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,CAAYzE,UAAU,cAAciK,MAAO,GACzCpK,EAAAC,EAAAC,cAACgD,EAAA,EAAKmH,OAAN,KACErK,EAAAC,EAAAC,cAACoK,EAAD,MACAtK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,wBAIN7E,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,CAAYzE,UAAU,cAAciK,MAAO,GACzCpK,EAAAC,EAAAC,cAACgD,EAAA,EAAKmH,OAAN,KACErK,EAAAC,EAAAC,cAAA,4CAEAF,EAAAC,EAAAC,cAACqK,EAAD,QAGJvK,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,CAAYzE,UAAU,cAAciK,MAAO,GACzCpK,EAAAC,EAAAC,cAACgD,EAAA,EAAKmH,OAAN,KACErK,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAASsB,SAAO,GACd3E,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,KACE5E,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVM,KAAK,OACL6C,SAAUC,KAAKyG,8BACfvG,YAAY,sBAGhBzD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,2BAEE5E,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVM,KAAK,WACL6C,SAAUC,KAAKwG,2BACftG,YAAY,kBAGhBzD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,6BAEE5E,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQM,KAAK,cAEhCT,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAQ1E,UAAU,SAASuD,QAASH,KAAK0G,cAAzC,kBAGAjK,EAAAC,EAAAC,cAACsK,GAAD,MACAxK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuK,GAAD,MACAzK,EAAAC,EAAAC,cAACwK,GAAD,kBApFMtK,IAAMC,YAmGbwD,qBACb,KAPyB,SAAArD,GACzB,MAAO,CACL0J,WAAY,SAAAS,GAAQ,OAAInK,GX8DFoK,EW9DsBD,EX8DP,SAACnK,EAAU8F,GAClD,IAAMC,EAAQD,IAAW/F,UAAUgG,MACnC/F,EAAS,CACPC,KAlKuB,gBAqKzBC,MAAM,0CAA2C,CAC/CC,OAAQ,QACRC,QAAS,CACP4F,cAAe,UAAYD,EAC3B1F,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU4J,KAEpB3J,KAAK,SAAAC,GAOJ,OANKA,EAAIC,IACPD,EAAIE,OAAOH,KAAK,SAAAI,GACd,MAAMA,IAIHH,EAAIE,SAEZH,KAAK,SAAAK,GAEJd,EAAS,CACPC,KAxL2B,sBAyL3B4D,YAAa/C,EAAKW,KAAKoC,cAGzB7D,EAASwD,eAAK,gBAEfvC,MAAM,SAAAJ,GAELb,EAAS,CACPC,KAhM2B,sBAiM3BoK,aAAc,0BApCI,IAAAD,KW1DX/G,CAGbiG,ICrGagB,WCZc1K,IAAMC,iBCAJD,IAAMC,iBCATD,IAAMC,kMHE9B,OAGEL,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMC,GAAG,gBACP5D,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAQ1E,UAAU,wBAAlB,wBAN2BC,IAAMC,YIwC1B0K,oLA5BZ,OACE/K,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/C,UAAU,OAAOgK,UAAQ,GAC7BnK,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMhD,UAAU,QACdH,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,CAAYzE,UAAU,cAAciK,MAAO,GACzCpK,EAAAC,EAAAC,cAACgD,EAAA,EAAKmH,OAAN,KACErK,EAAAC,EAAAC,cAACoK,EAAD,QAIJtK,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,CAAYzE,UAAU,cAAciK,MAAO,GACzCpK,EAAAC,EAAAC,cAACgD,EAAA,EAAKmH,OAAN,KACErK,EAAAC,EAAAC,cAAC8K,EAAD,MACAhL,EAAAC,EAAAC,cAAC+K,EAAD,QAIJjL,EAAAC,EAAAC,cAACiD,EAAA,EAAKyB,MAAN,CAAYzE,UAAU,cAAciK,MAAO,GACzCpK,EAAAC,EAAAC,cAACgD,EAAA,EAAKmH,OAAN,KACErK,EAAAC,EAAAC,cAACgL,GAAD,MACAlL,EAAAC,EAAAC,cAACwK,GAAD,iBArBUtK,IAAMC,WCmEd8K,eA7Db,SAAAA,IAAc,IAAAxI,EAAA,OAAAuC,OAAAgC,EAAA,EAAAhC,CAAA3B,KAAA4H,IACZxI,EAAAuC,OAAAsC,EAAA,EAAAtC,CAAA3B,KAAA2B,OAAAuC,EAAA,EAAAvC,CAAAiG,GAAAzD,KAAAnE,QACKjB,MAAQ,CACX8H,MAAOnG,OAAOmH,YAHJzI,wEAOZ,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACmL,EAAD,MACArL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAKXH,EAAAC,EAAAC,cAACoL,EAAA,EAAD,KACEtL,EAAAC,EAAAC,cAACqL,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAAAzI,GAAK,OACXjD,EAAAC,EAAAC,cAACF,EAAAC,EAAM0L,SAAP,KACE3L,EAAAC,EAAAC,cAAC0L,EAAD,UAKN5L,EAAAC,EAAAC,cAACqL,EAAA,EAAD,CAEEE,KAAK,gBACLC,OAAQ,SAAAzI,GAAK,OACXjD,EAAAC,EAAAC,cAACF,EAAAC,EAAM0L,SAAP,KAEE3L,EAAAC,EAAAC,cAAC2L,EAAD,UAKN7L,EAAAC,EAAAC,cAACqL,EAAA,EAAD,CACEE,KAAM,eACNC,OAAQ,SAAAzI,GAAK,OACXjD,EAAAC,EAAAC,cAACF,EAAAC,EAAM0L,SAAP,KACE3L,EAAAC,EAAAC,cAAC4L,GAAD,UAIN9L,EAAAC,EAAAC,cAACqL,EAAA,EAAD,CACEE,KAAM,YACNC,OAAQ,SAAAzI,GAAK,OACXjD,EAAAC,EAAAC,cAACF,EAAAC,EAAM0L,SAAP,KACE3L,EAAAC,EAAAC,cAAC6L,GAAD,oBAlDF3L,IAAMC,WCZlB2L,GAAcC,QACW,cAA7BhI,OAAOiI,SAASC,UAEe,UAA7BlI,OAAOiI,SAASC,UAEhBlI,OAAOiI,SAASC,SAASC,MACvB,2DAiCN,SAASC,GAAgBC,GACvBC,UAAUC,cACP9H,SAAS4H,GACTrL,KAAK,SAAAwL,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrK,QACfiK,UAAUC,cAAcM,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBvL,MAAM,SAAAwL,GACLF,QAAQE,MAAM,4CAA6CA,2BC1C3DC,GAAe,CACnBxI,SAAU,GACVK,eAAgB,GAChBxE,UAAW,CAAEgG,MAAO,GAAIuB,GAAI,EAAGvG,SAAS,GACxCG,YAAa,GAEbO,KAAM,CACJ6F,GAAI,EACJvF,SAAU,GACV8B,YAAa,GACb8E,MAAO,GACPnB,UAAW,GACXmF,UAAW,GACXrL,SAAU,IAEZK,MAAO,CACL,CACE2F,GAAI,EACJvF,SAAU,GACV8B,YAAa,GACb8E,MAAO,GACPnB,UAAW,GACXmF,UAAW,KAGf9I,YAAa,GACbwG,aAAc,GACdpB,iBAAkB,GAClB3H,SAAU,IAwHGsL,GArHC,WAAkC,IAAjC9K,EAAiCuD,UAAAuB,OAAA,QAAAiG,IAAAxH,UAAA,GAAAA,UAAA,GAAzBqH,GAAc9J,EAAWyC,UAAAuB,OAAA,EAAAvB,UAAA,QAAAwH,EAChD,OAAQjK,EAAO3C,MAEb,InB5DoB,WmB6DlB,OAAO6B,EAET,InB9D4B,mBmB+D1B,OAAO4C,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEoC,SAAUtB,EAAOsB,SACjBK,eAAgB3B,EAAOU,SAG3B,InBpEyB,gBmBqEvB,OAAOoB,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEyC,eAAgB3B,EAAOU,SAG3B,InBvEyB,gBmBwEvB,OAAOoB,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEE/B,UAAW6C,EAAO7C,YAGtB,InB3EyB,gBmBiFzB,InBlFiB,QmBmFf,OAAO2E,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEZ,YAAa0B,EAAOU,SAGxB,InB9E+B,sBmB+E7B,OAAOoB,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EACA4K,IAGP,InBnF+B,sBmBoF7B,OAAOhI,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEmH,iBAAkBrG,EAAOqG,mBAG7B,InB3FuB,cmB4FrB,OAAOvE,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,GAGP,InB3FwB,emB4FtB,OAAO4C,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEER,SAAUsB,EAAOtB,WAGrB,InBzFyB,gBmB0FvB,OAAOoD,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEER,SAAUsB,EAAOU,SAIrB,InBlHuB,cmBmHrB,OAAOoB,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,GAGP,InBtH+B,sBmBuH7B,OAAO4C,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEE+B,YAAajB,EAAOiB,cAGxB,InB3H+B,sBmB4H7B,OAAOa,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEuI,aAAczH,EAAOyH,eAGzB,InBrHoB,WmBsHlB,OAAO3F,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,GAGP,InBzH4B,mBmB0H1B,OAAO4C,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEL,KAAMmB,EAAOnB,OAGjB,InBjIyB,gBmBkIvB,OAAOiD,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEH,MAAOiB,EAAOjB,QAGlB,InBnI6B,oBmBoI3B,OAAO+C,OAAAoI,GAAA,EAAApI,CAAA,GACF5C,EADL,CAEEiL,WAAYnK,EAAOtB,WAGvB,InBtIuB,cmBuIrB,OAAOoD,OAAAoI,GAAA,EAAApI,CAAA,GACFgI,IAGP,QACE,OAAO5K,uBCjKPkL,GAAiBC,eAIjBC,GAAmBzJ,OAAO0J,sCAAwCC,KAGlEC,GAAQC,aACZC,wBAAcP,GAAdO,CAA8BX,IAC9BM,GAAiBM,aAAgBC,2BAAiBT,IAAiBU,QAGrEC,IAASzC,OACP1L,EAAAC,EAAAC,cAACkO,EAAA,SAAD,CAAUP,MAAOA,IACf7N,EAAAC,EAAAC,cAACmO,EAAA,gBAAD,CAAiBC,SAAUC,WAAwBC,QAAShB,IAC1DxN,EAAAC,EAAAC,cAACuO,GAAD,QAGJC,SAASC,eAAe,SFdX,WACb,GAA6C,kBAAmBpC,UAAW,CAGzE,GADkB,IAAIqC,IAAIL,WAAwBtK,OAAOiI,UAC3C2C,SAAW5K,OAAOiI,SAAS2C,OAIvC,OAEF5K,OAAO6K,iBAAiB,OAAQ,WAC9B,IAAMxC,EAAK,GAAA1F,OAAM2H,WAAN,sBACPvC,IA8CV,SAAiCM,GAE/B5L,MAAM4L,GACHrL,KAAK,SAAAW,GAGkB,MAApBA,EAASkF,SACuD,IAAhElF,EAAShB,QAAQmO,IAAI,gBAAgBC,QAAQ,cAG7CzC,UAAUC,cAAcyC,MAAMhO,KAAK,SAAAwL,GACjCA,EAAayC,aAAajO,KAAK,WAC7BgD,OAAOiI,SAASiD,aAKpB9C,GAAgBC,KAGnB7K,MAAM,WACLsL,QAAQC,IACN,mEAlEAoC,CAAwB9C,GAGxBC,UAAUC,cAAcyC,MAAMhO,KAAK,WACjC8L,QAAQC,IACN,+GAMJX,GAAgBC,METxB+C","file":"static/js/main.dff82ff7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stockIcon.b531e899.gif\";","// import \"../styles/Header.css\";\n// import React from 'react';\n\n// class Header extends React.Component {\n//   render() {\n//     return (\n//       <div className=\"header\">\n//       <strong>Kwitter</strong>\n//       {/* insert icon\n//      */}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Header;\n\nimport \"../styles/Header.css\";\nimport React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"head\">\n        <div className=\"kwitterIcon\" />\n        <h1>KWITTER</h1>\n        {/* <h2>Something Cool and Sweet</h2> */}\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import { push } from \"connected-react-router\";\n\n// consts for registration\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\n\n// consts for login\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\n\n// const for update user\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\n\n// const for delete user\nexport const DELETE_USER = \"DELETE_USER\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\n\n//const for messages\nexport const GET_MESSAGES = \"GET_MESSAGES\";\n\n// const for getting user info\nexport const GET_ALL_USERS = \"GET_ALL_USERS\";\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\n\nexport const GET_USER_MESSAGES = \"GET_USER_MESSAGES\";\nexport const POST_MESSAGES = \"POST_MESSAGES\";\n\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n\n// consts for logout\n// export const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\n// export const LOGOUT = \"LOGOUT\";\n// export const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\n\nexport const postMessage = text => (dispatch, getState) => {\n  const token = getState().loginData.token;\n\n  fetch(\"https://kwitter-api.herokuapp.com/messages/\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ text: text })\n  })\n    .then(response => response.json())\n    .then(data => {\n      dispatch(fetchMessages());\n      // dispatch({type: _____})\n    });\n};\n\n//consts for profile.  push onto the history stack (to hit back a page)\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     register: registerData => dispatch(register(registerData))\n//   };\n// };\n\nexport const register = registerData => dispatch => {\n  // dispatch here before fetch\n  dispatch({\n    type: REGISTER\n  });\n\n  fetch(\"https://kwitter-api.herokuapp.com/auth/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(registerData)\n  })\n    .then(res => {\n      if (!res.ok) {\n        res.json().then(err => {\n          throw err;\n        });\n      }\n\n      return res.json();\n    })\n    .then(data => {\n      // dispatch here on success --\n      dispatch({\n        type: REGISTER_SUCCESS,\n        register: data,\n        result: \"Successfully Registered!\"\n      });\n\n      async function fixTheRoute() {\n        await dispatch(\n          login({\n            username: registerData.username,\n            password: registerData.password\n          })\n          )\n          .then(() => dispatch(push(\"/userProfile\")))\n      }\n      fixTheRoute();\n\n    })\n    .catch(err => {\n      // dispatch here on fail --\n      dispatch({\n        type: REGISTER_FAIL,\n        result: \"Failed to Register!\"\n      });\n    });\n};\n\nexport const loginThenMainFeed = loginData => dispatch => {\n  dispatch(login(loginData))\n  .then(() => dispatch(push('/mainFeed')))\n  .catch(() => window.alert(\"GET OUT RIGHT NOW!!!!  Bad password or username.\"))\n}\n\nexport const login = loginData => dispatch => {\n  // dispatch here before fetch\n  dispatch({\n    type: LOGIN\n  });\n\n  return fetch(\"https://kwitter-api.herokuapp.com/auth/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginData)\n  })\n    .then(res => {\n      if (!res.ok) {\n        res.json().then(err => {\n          throw err;\n        });\n      }\n\n      return res.json();\n    })\n    .then(data => {\n      // dispatch here on success --\n      if (data.success === true) {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          loginData: data\n        });\n        // logic for routing\n        dispatch(getAllUsersInfo());\n\n      } else {\n        throw \"nope.\";\n      }\n    })\n    .catch(err => {\n      // dispatch here on fail --\n      \n      throw dispatch({\n        type: LOGIN_FAILURE,\n        loginResult: \"You shall not pass!\"\n      });\n    });\n};\n\n// the newUserData is only for the text boxes.  the image will be in a separate endpoint.\n\n// newUserData is a reference to the body or value being passed in (component information which is responsible for grabbing data out of input boxes and sending it to the action creator.)\nexport const updateUser = newUserData => (dispatch, getState) => {\n  const token = getState().loginData.token;\n  dispatch({\n    type: UPDATE_USER\n  });\n\n  fetch(\"https://kwitter-api.herokuapp.com/users\", {\n    method: \"PATCH\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newUserData)\n  })\n    .then(res => {\n      if (!res.ok) {\n        res.json().then(err => {\n          throw err;\n        });\n      }\n\n      return res.json();\n    })\n    .then(data => {\n      // dispatch here on success --\n      dispatch({\n        type: UPDATE_USER_SUCCESS,\n        displayName: data.user.displayName\n      });\n      // logic for routing when dealing with asych functions.\n      dispatch(push(\"/mainFeed\"));\n    })\n    .catch(err => {\n      // dispatch here on fail --\n      dispatch({\n        type: UPDATE_USER_FAILURE,\n        updateResult: \"no one likes you\"\n      });\n    });\n};\n\nexport const deleteUser = () => (dispatch, getState) => {\n  const token = getState().loginData.token;\n  dispatch({\n    type: DELETE_USER\n  });\n\n  fetch(\"https://kwitter-api.herokuapp.com/users\", {\n    method: \"DELETE\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })\n    .then(res => {\n      if (!res.ok) {\n        res.json().then(err => {\n          throw err;\n        });\n      }\n      return res.json();\n    })\n    .then(data => {\n      dispatch({\n        type: DELETE_USER_SUCCESS\n      });\n      dispatch(push(\"/\"));\n    })\n    .catch(err => {\n      dispatch({\n        type: DELETE_USER_FAILURE,\n        deleteUserResult: \"Permission denied\"\n      });\n    });\n};\n\nexport const fetchMessages = () => dispatch => {\n  fetch(\"https://kwitter-api.herokuapp.com/messages?limit=10\")\n    .then(response => response.json())\n    .then(data => {\n      dispatch(getMessages(data.messages));\n    });\n};\n\nexport const getMessages = messages => {\n  return {\n    type: GET_MESSAGES,\n    messages\n  };\n};\n\nexport const fetchAHMessages = () => (dispatch, getState) => {\n  const AHID = getState().loginData.id;\n  fetch(`https://kwitter-api.herokuapp.com/users/${AHID}`)\n    //AHID is a javascript variable that pulls the information from the redux state which houses the information of our user ID and allows us to put it into the fetch request.\n    .then(response => response.json())\n    .then(data => {\n      dispatch(getAHMessages(data.user.messages));\n    });\n};\n\nexport const getAHMessages = messages => {\n  return {\n    type: GET_USER_MESSAGES,\n    messages\n  };\n};\n\nexport const getUserData = () => (dispatch, getState) => {\n  const userId = getState().loginData.id;\n  dispatch({\n    type: GET_USER\n  });\n  fetch(`https://kwitter-api.herokuapp.com/users/${userId}`)\n    .then(response => response.json())\n    .then(data => {\n      dispatch(getUserSuccess(data.user));\n    });\n};\n\nexport const getUserSuccess = user => {\n  return {\n    type: GET_USER_SUCCESS,\n    user\n  };\n};\n\nexport const getAllUsersInfo = () => dispatch => {\n  fetch(\"https://kwitter-api.herokuapp.com/users?limit=10000&offset=0\")\n    .then(response => response.json())\n    .then(data => {\n      dispatch(getAllInfo(data.users));\n    });\n};\n\nexport const getAllInfo = users => {\n  return {\n    type: GET_ALL_USERS,\n    users\n  };\n};\n\n\nexport const logoutUser = () => dispatch => {\n  dispatch(logoutCurrentUser())\n  dispatch(push(\"/\"))\n}\n\nexport const logoutCurrentUser= () => {\n  return {\n    type: LOGOUT_USER\n  }\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loginThenMainFeed } from \"../actions/action\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Grid, Segment } from \"semantic-ui-react\";\nimport \"../styles/LoginForm.css\";\n\nclass LoginForm extends Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleCheckUserName = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n\n  handleCheckPassword = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n\n  handleLogin = event => {\n    this.props.login({\n      username: this.state.username,\n      password: this.state.password\n    });\n  };\n\n  render() {\n    return (\n      <Grid>\n        <Form\n          action=\"https://s.codepen.io/voltron2112/debug/PqrEPM?\"\n          method=\"get\"\n          className=\"ui large form\"\n        >\n          <Segment>\n            <div className=\"ui stacked secondary segment\">\n              <div className=\"field\">\n                <div className=\"ui left icon input\">\n                  <i className=\"user icon\" />\n                  <input\n                    type=\"text\"\n                    onChange={this.handleCheckUserName}\n                    required\n                    placeholder=\"Enter Username\"\n                  />\n                </div>\n              </div>\n              <div className=\"field\">\n                <div className=\"ui left icon input\">\n                  <i className=\"lock icon\" />\n                  <input\n                    type=\"password\"\n                    onChange={this.handleCheckPassword}\n                    required\n                    placeholder=\"Enter Password\"\n                  />\n                </div>\n              </div>\n              <div\n                className=\"ui fluid large teal submit button\"\n                onClick={this.handleLogin}\n              >\n                Login\n              </div>\n            </div>\n            <Link to=\"/registration\">\n              <div className=\"ui message\">\n                New To Us? Register\n                {/* <a\n                href=\"https://s.codepen.io/voltron2112/debug/PqrEPM?\"\n                onClick={this.setRedirect}\n              >\n                Register\n              </a> */}\n              </div>\n            </Link>\n          </Segment>\n        </Form>\n      </Grid>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    result: state.LoginResult\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: loginData => dispatch(loginThenMainFeed(loginData))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginForm);\n","import React, { Component } from \"react\";\nimport { register } from \"../actions/action\";\nimport { connect } from \"react-redux\";\nimport \"../styles/RegistrationPage.css\";\nimport { Form, Segment, Grid, Button } from \"semantic-ui-react\";\n\n// let Center = require(\"react-center\");\n\nclass RegistrationPage extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    displayName: \"\"\n  };\n  handleChangeUsername = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  handleChangePassword = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  handleChangeDisplayName = event => {\n    this.setState({\n      displayName: event.target.value\n    });\n  };\n  handleRegister = event => {\n    this.props.register({\n      username: this.state.username,\n      password: this.state.password,\n      displayName: this.state.displayName\n    });\n  };\n  render() {\n    return (\n      <div className=\"entireform\">\n        <Grid className=\"grid\">\n          <Form className=\"somethingGood\">\n            <Segment stacked>\n              <Form.Field>\n                <input\n                  type=\"text\"\n                  onChange={this.handleChangeUsername}\n                  required\n                  placeholder=\"Username\"\n                />\n              </Form.Field>\n              <br />\n              <Form.Field>\n                <input\n                  type=\"password\"\n                  onChange={this.handleChangePassword}\n                  required\n                  placeholder=\"Password\"\n                />\n              </Form.Field>\n              <br />\n              <Form.Field>\n                <input\n                  type=\"text\"\n                  onChange={this.handleChangeDisplayName}\n                  required\n                  placeholder=\"Display Name\"\n                />\n              </Form.Field>\n              <Button\n                onClick={this.handleRegister}\n                name=\"register\"\n                placeholder=\"Register\"\n              >\n                Register\n              </Button>\n            </Segment>\n          </Form>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    result: state.registerResult\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    register: registerData => dispatch(register(registerData))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegistrationPage);\n","import \"../styles/MessageFeed.css\";\nimport React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { fetchMessages, postMessage } from \"../actions/action\";\n\nclass PostMessage extends React.Component {\n  state = {\n    body: \"\"\n  };\n}\n\nclass MessageInputBox extends React.Component {\n  state = {\n    message: \"\"\n  };\n  handleMessages = event => {\n    this.setState({ message: event.target.value });\n  };\n  handlepostMessage = event => {\n    this.props.postMessage(this.state.message);\n    this.setState({ message: \"\" });\n  };\n  render() {\n    return (\n      <div className=\"messages\">\n        <div className=\"messageFeed\">\n          <div>\n            <input\n              value={this.state.message}\n              placeholder=\"Kweet here!\"\n              type=\"text\"\n              onChange={this.handleMessages}\n            />\n            <br />\n            <button onClick={this.handlepostMessage}>Post Kweet!</button>\n            <br />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  postMessage: message => dispatch(postMessage(message))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessageInputBox);\n","import React from \"react\";\nimport \"../styles/ImageDisplayer.css\"\nimport stockIcon from \"../styles/photos/stockIcon.gif\"\n\nclass ImageDisplayer extends React.Component {\n   state = { src: stockIcon }\n   componentDidMount(\n   ) {\n       fetch(`https://kwitter-api.herokuapp.com/users/${this.props.userID}/picture`)\n           .then(res => {\n               if (res.status !== 404 && res.ok) {\n                   this.setState({\n                       src: `https://kwitter-api.herokuapp.com/users/${this.props.userID}/picture`\n                   })\n               }\n           })\n   }\n   render() {\n       return (\n               <img className=\"image\" src={this.state.src}></img>\n       )\n   }\n}\nexport default ImageDisplayer;","import \"../styles/MessageFeed.css\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchMessages } from \"../actions/action\";\nimport { MessageInputBox } from \"./MessageInputBox\";\nimport moment from \"moment\";\nimport ImageDisplayer from \"./ImageDisplayer\";\n\nexport class MessageFeed extends React.Component {\n  componentDidMount() {\n    this.props.fetchMessages();\n  }\n\n  matchIdtoUsername = userId => {\n    let user = this.props.users.find(user => user.id === userId);\n    if (user) return user.username;\n    return \"Deleted\";\n  };\n\n  formatDate = createdAt => {\n    const date = new Date(createdAt);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString();\n  };\n\n  render() {\n    return (\n      <div className=\"messages\">\n        <div className=\"messageFeed\">\n          {this.props.messages.map(message => (\n            <div>\n              <ImageDisplayer userID={message.userId} />\n              {this.matchIdtoUsername(message.userId)}: <br />\n              {message.text} <br />\n              {this.formatDate(message.createdAt)}\n            </div>\n          ))}\n          {/* list of all messages.  This will be a fetch/get request. Will involve polling.  And we need to make sure the most recent message is at the top, and messages are listed in descending order. See if we can adjust formatting so that the feed scrolls down automatically--may include an auto feed of the next 10 or so messages as the mouse moves.*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages || [],\n    users: state.users\n  };\n};\n\nconst mapDispatchToProps = {\n  //This is a shorcut for map.dispatchToProps\n  fetchMessages\n  // could also add getAllUserInfo here to give the component the data it needs to make changes to the feed info.\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessageFeed);\n","import \"../styles/UserProfileSynopsis.css\";\nimport React from \"react\";\nimport { Card, Image, Icon } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { getUserData } from \"../actions/action\";\nimport moment from \"moment\";\nimport ImageDisplayer from './ImageDisplayer';\n\nclass UserProfileSynopsis extends React.Component {\n  componentDidMount() {\n    this.props.getUserData();\n  }\n\n\n\n  matchIdtoUsername = userId => {\n    let user = this.props.user.find(user => user.id === userId);\n    if (user) return user.username;\n    return \"Deleted\";\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Card className=\"userprofile\">\n          {/* <Image src=\"https://semantic-ui.com/images/wireframe/image.png\" /> */}\n          <ImageDisplayer userID={this.props.user.id} />\n          {/* link to image file above  this.state.user.photo? */}\n          <Card.Content>\n            <Card.Header>Name: {this.props.user.displayName}</Card.Header>\n            <Card.Meta>\n\n                <span className=\"date\">\n                Kweeter since {moment(this.props.user.createdAt).fromNow()}\n                </span>\n            </Card.Meta>\n\n            <Card.Description>\n              Hello my name is {this.props.user.username} , This is what I have to say about myself: \"{this.props.user.about}\"\"\n\n            </Card.Description>\n          </Card.Content>\n\n          <Card.Content extra>\n            <a>\n              <Icon name=\"user\" />\n              1M Friends\n            </a>\n          </Card.Content>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    result: state.registerResult,\n    user: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUserData: () => dispatch(getUserData())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserProfileSynopsis);\n","import { fetchAHMessages } from \"../actions/action\";\nimport { connect } from \"react-redux\";\nimport { MessageFeed } from \"./MessageFeed\";\n\nconst mapStateToProps = state => {\n    return {\n      messages: state.user.messages || [],\n      users: state.users\n    };\n  };\n  \n  const mapDispatchToProps = \n    {\n      //This is a shorcut for map.dispatchToProps\n      fetchMessages: fetchAHMessages\n    };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(MessageFeed);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteUser } from \"../actions/action\";\nimport { Button } from \"semantic-ui-react\";\n\nclass DeleteUserButton extends React.Component {\n  render() {\n    return (\n      <Button className=\"deleteUserButton\" onClick={this.props.deleteUser}>\n        Delete User\n      </Button>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteUser: () => dispatch(deleteUser())\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(DeleteUserButton);\n\n//this will need to be linked with the button in the Profile.js\n","import \"../styles/mainFeedNavButton.css\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"semantic-ui-react\";\n\nclass MainFeedNavButton extends React.Component {\n  render() {\n    return (\n      // button below takes user to the main page\n      //\n      <Link to=\"/mainFeed\">\n        <Button className=\"mainFeedNavButton\" onClick={this.setRedirect}>\n          Main Page\n        </Button>\n      </Link>\n    );\n  }\n}\n\nexport default MainFeedNavButton;\n","import \"../styles/LogOutButton.css\";\nimport React from \"react\";\nimport { Button } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { logoutUser } from '../actions/action';\n\nclass LogOutButton extends React.Component {\n  render() {\n    return (\n      <Button\n        className=\"logOutButton\"\n        onClick={this.props.logoutUser}\n      >\n        Log Out\n      </Button>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = {\n  logoutUser\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(LogOutButton);\n","\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { register, updateUser } from \"../actions/action\";\nimport MessageFeed from \"./MessageFeed\";\nimport UserProfileSynopsis from \"./UserProfileSynopsis\";\n// import MessageInputBox from \"./MessageInputBox.js\";\nimport AHMessageFeed from \"./AHMessageFeed.js\";\nimport DeleteUserButton from \"./deleteUserButton.js\";\nimport MainFeedNavButton from \"./MainFeedNavButton.js\";\nimport { Grid, Button, Form, Segment } from \"semantic-ui-react\";\nimport LogOutButton from './LogOutButton';\nimport \"../styles/Profile.css\";\n//this was class changeuserprofile\nclass Profile extends React.Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    displayName: \"\",\n    token: \"\"\n    // image: ?  check component library for specialized one or an html img tag (<img src=\"/users/idNO/picture\">)\n  };\n  // we're not adding a change username function because the \"username\" for purposes of the API is the user's actual name, which the team has decided shouldn't change.  Only the display name and the password should be changed.\n  handleChangeUpdatePassword = event => {\n    this.setState({\n      password: event.target.value\n    });\n  };\n  // handleChaneUpdatePasswordConfirmation = event => {\n  // }\n  handleChangeUpdateDisplayName = event => {\n    this.setState({\n      displayName: event.target.value\n    });\n  };\n  handleUpdate = event => {\n    // if(the two password boxes are equal (characters and casing), then update the user)\n    this.props.updateUser({\n      password: this.state.password,\n      displayName: this.state.displayName\n      // image: this.state.image\n      // about: this.state.about  this is another bit of information about our user that we can access/display in the user profile.\n    });\n  };\n  render() {\n    return (\n      <Grid className=\"grid\" centered>\n        <Form className=\"form\">\n          <Form.Field className=\"gridcolumn1\" width={4}>\n            <Grid.Column>\n              <UserProfileSynopsis />\n              <div className=\"uploadphoto\">\n                <Button>Upload photo</Button>\n              </div>\n            </Grid.Column>\n          </Form.Field>\n          <Form.Field className=\"gridcolumn2\" width={6}>\n            <Grid.Column>\n              <p>Where the feed for Profile goes</p>\n              {/* <AHMessageFeed /> */}\n              <AHMessageFeed />\n            </Grid.Column>\n          </Form.Field>\n          <Form.Field className=\"gridcolumn3\" width={4}>\n            <Grid.Column>\n              <legend>Making a Change?</legend>\n              <Segment stacked>\n                <Form.Field>\n                  <input\n                    className=\"input\"\n                    type=\"text\"\n                    onChange={this.handleChangeUpdateDisplayName}\n                    placeholder=\"New Display Name\"\n                  />\n                </Form.Field>\n                <br />\n                <Form.Field>\n                  Enter New Password:\n                  <br />\n                  <input\n                    className=\"input\"\n                    type=\"password\"\n                    onChange={this.handleChangeUpdatePassword}\n                    placeholder=\"New Password\"\n                  />\n                </Form.Field>\n                <br />\n                <Form.Field>\n                  Confirm New Password:\n                  <br />\n                  <input className=\"input\" type=\"password\" />\n                </Form.Field>\n                <Button className=\"button\" onClick={this.handleUpdate}>\n                  Submit changes\n                </Button>\n                <DeleteUserButton />\n                <br />\n                <MainFeedNavButton />\n                <LogOutButton />\n              </Segment>\n            </Grid.Column>\n          </Form.Field>\n        </Form>\n      </Grid>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateUser: userData => dispatch(updateUser(userData))\n    // updateUser is a prop that needs to be used SOMEWHERE in the component.\n  };\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Profile);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'semantic-ui-react';\n\nclass ProfilePageNavButton extends React.Component {\n  render() {\n    return (\n      // button below takes user to the main page\n      //\n      <Link to=\"/userProfile\">\n        <Button className=\"profilePageNavButton\">Profile Page</Button>\n      </Link>\n    );\n  }\n}\n\nexport default ProfilePageNavButton;\n","import \"../styles/PostNewMessage.css\";\nimport React from \"react\";\nimport PostMessage from \"../actions/action\";\n\nclass PostNewMessage extends React.Component {\n  render() {\n    return (\n      <div className=\"loginPage\">\n        <div className=\"messageBox\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              What's happening?\n              <input\n                type=\"text\"\n                // value={this.state.value}\n              />\n              <button>\n                {/* will need to post message to db here.  probably will include onChange or onClick */}\n              </button>\n            </label>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostNewMessage;\n","import \"../styles/SearchForMessage.css\";\nimport React from 'react';\nimport MessageFeed from './MessageFeed';\n\nclass SearchForMessage extends React.Component {\n  render() {\n    return (\n      <div className=\"findMessages\">\n        <MessageFeed />\n        {/* This will need to search the messsage feed to find messages by ID. */}\n      </div>\n    );\n  }\n}\n\nexport default SearchForMessage;\n","import \"../styles/DeleteMessage.css\";\nimport React from 'react';\nimport MessageFeed from './MessageFeed';\n\nclass DeleteMessage extends React.Component {\n  render() {\n    return (\n      <div className=\"deleteMessageByID\">\n        <MessageFeed />\n        {/* This will require manipulating the message feed to identify messages by account holder (by name)  and then delete messages by that person.*/}\n      </div>\n    );\n  }\n}\n\nexport default DeleteMessage;\n","\n\n\nimport \"../styles/MainPage.css\";\nimport React from \"react\";\nimport { Grid, Form, Segment } from \"semantic-ui-react\";\n\nimport MessageFeed from \"./MessageFeed\";\nimport LogOutButton from \"./LogOutButton\";\nimport UserProfileSynopsis from \"./UserProfileSynopsis\";\nimport MessageInputBox from \"./MessageInputBox.js\";\nimport ProfilePageNavButton from \"./ProfilePageNavButton.js\";\n\n//changed file name and component name from messagefeed to mainfeed\nclass MainPage extends React.Component {\n render() {\n   return (\n     <Grid className=\"grid\" centered>\n       <Form className=\"form\">\n         <Form.Field className=\"gridcolumn1\" width={4}>\n           <Grid.Column>\n             <UserProfileSynopsis />\n           </Grid.Column>\n         </Form.Field>\n\n         <Form.Field className=\"gridcolumn2\" width={6}>\n           <Grid.Column>\n             <MessageInputBox />\n             <MessageFeed />\n           </Grid.Column>\n         </Form.Field>\n\n         <Form.Field className=\"gridcolumn2\" width={4}>\n           <Grid.Column>\n             <ProfilePageNavButton />\n             <LogOutButton />\n           </Grid.Column>\n         </Form.Field>\n       </Form>\n     </Grid>\n   );\n }\n}\n\nexport default MainPage;","import \"../styles/App.css\";\nimport React, { Fragment } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport LoginForm from \"./LoginForm\";\nimport RegistrationPage from \"./RegistrationPage\";\nimport Profile from \"./Profile\";\nimport UserProfileSynopsis from \"./UserProfileSynopsis\";\nimport LogOutButton from \"./LogOutButton\";\nimport PostNewMessage from \"./PostNewMessage\";\nimport MessageFeed from \"./MessageFeed\";\nimport SearchForMessages from \"./SearchForMessage\";\nimport DeleteMessage from \"./DeleteMessage\";\nimport { UPDATE_USER, updateUser } from \"../actions/action\";\nimport MessageInputBox from \"./MessageInputBox\";\n\nimport MainPage from \"./MainPage\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      width: window.innerWidth\n    };\n  }\n  render() {\n    return (\n      <div className=\"firstView\">\n        <Header />\n        <div className=\"startingPage\">\n          {/* <Header />\n          <LoginForm /> */}\n\n          {\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={props => (\n                  <React.Fragment>\n                    <LoginForm />\n                  </React.Fragment>\n                )}\n              />\n\n              <Route\n                // exact\n                path=\"/registration\"\n                render={props => (\n                  <React.Fragment>\n                    {/* <Header /> */}\n                    <RegistrationPage />\n                  </React.Fragment>\n                )}\n              />\n\n              <Route\n                path={\"/userProfile\"}\n                render={props => (\n                  <React.Fragment>\n                    <Profile />\n                  </React.Fragment>\n                )}\n              />\n              <Route\n                path={\"/mainFeed\"}\n                render={props => (\n                  <React.Fragment>\n                    <MainPage />\n                  </React.Fragment>\n                )}\n              />\n            </Switch>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n\n\n","import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  REGISTER,\n  POST_MESSAGES\n} from \"../actions/action\";\n\nimport { LOGIN_SUCCESS, LOGIN_FAILURE, LOGIN } from \"../actions/action\";\nimport {\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAILURE,\n  DELETE_USER\n} from \"../actions/action\";\nimport { GET_MESSAGES } from \"../actions/action\";\n\nimport {\n  UPDATE_USER,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAILURE\n} from \"../actions/action\";\nimport {\n  GET_USER,\n  GET_ALL_USERS,\n  GET_USER_SUCCESS,\n  GET_USER_MESSAGES\n} from \"../actions/action\";\n\nimport { LOGOUT_USER } from \"../actions/action\";\n\nconst initialState = {\n  register: {},\n  registerResult: \"\",\n  loginData: { token: \"\", id: 0, success: false },\n  loginResult: \"\",\n\n  user: {\n    id: 0,\n    username: \"\",\n    displayName: \"\",\n    about: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    messages: []\n  },\n  users: [\n    {\n      id: 0,\n      username: \"\",\n      displayName: \"\",\n      about: \"\",\n      createdAt: \"\",\n      updatedAt: \"\"\n    }\n  ],\n  displayName: \"\",\n  updateResult: \"\",\n  deleteUserResult: \"\",\n  messages: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // cases below are for the registering\n    case REGISTER:\n      return state;\n\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        register: action.register,\n        registerResult: action.result\n      };\n\n    case REGISTER_FAIL:\n      return {\n        ...state,\n        registerResult: action.result\n      };\n    // cases below are for the login page\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        loginData: action.loginData\n      };\n\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        loginResult: action.result\n      };\n// above line for login failure window alert\n    case LOGIN:\n      return {\n        ...state,\n        loginResult: action.result\n      };\n\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        ...initialState\n      };\n\n    case DELETE_USER_FAILURE:\n      return {\n        ...state,\n        deleteUserResult: action.deleteUserResult\n      };\n\n    case DELETE_USER:\n      return {\n        ...state\n      };\n\n    case GET_MESSAGES:\n      return {\n        ...state,\n        messages: action.messages\n      };\n\n    case POST_MESSAGES:\n      return {\n        ...state,\n        messages: action.result\n      };\n\n    // cases below are for updating the user's info\n    case UPDATE_USER:\n      return {\n        ...state\n      };\n\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        displayName: action.displayName\n      };\n\n    case UPDATE_USER_FAILURE:\n      return {\n        ...state,\n        updateResult: action.updateResult\n      };\n\n    case GET_USER:\n      return {\n        ...state\n      };\n\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        user: action.user\n      };\n\n    case GET_ALL_USERS:\n      return {\n        ...state,\n        users: action.users\n      };\n\n    case GET_USER_MESSAGES:\n      return {\n        ...state,\n        AHMessages: action.messages\n      };\n    \n    case LOGOUT_USER:\n      return {\n        ...initialState\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\n// with log out button, return everything to initial state.\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ConnectedRouter , connectRouter, routerMiddleware } from 'connected-react-router';\nimport App from \"./components/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers/reducerIndex\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from 'history';\n\nconst browserHistory = createBrowserHistory()\n\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\nconst store = createStore(\n  connectRouter(browserHistory)(reducer),\n  composeEnhancers(applyMiddleware(routerMiddleware(browserHistory), thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter basename={process.env.PUBLIC_URL} history={browserHistory}> \n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}